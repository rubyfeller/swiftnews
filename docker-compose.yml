version: '3.9'

services:
  postservice:
    image: postservice
    build:
      context: PostService
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      ConnectionStrings__PostsConn: "Server=postdb;Database=posts;User ID=postgres;Password=postgres"
      RabbitMQHost: "rabbitmq"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postdb:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:8080/health || exit 1"
        ]
      interval: 10s
      retries: 5
      timeout: 5s

  likeservice:
    image: likeservice
    build:
      context: LikeService
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      RabbitMQHost: "rabbitmq"
      LikeStoreDatabaseSettings__ConnectionString: "mongodb://mongouser:mongopassword@mongodb:27017/"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:8081/health || exit 1"
        ]
      interval: 10s
      retries: 5
      timeout: 5s

  userservice:
    build:
      context: UserService
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__DefaultConnection: "Server=userdb;Database=users;User ID=postgres;Password=postgres"
    depends_on:
      userdb:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:8082/health || exit 1"
        ]
      interval: 10s
      retries: 5
      timeout: 5s

  postdb:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: posts
    ports:
      - "5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      retries: 5
      timeout: 5s

  userdb:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    ports:
      - "5433:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      retries: 5
      timeout: 5s

  mongodb:
    container_name: mongodb
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: mongopassword
    ports:
      - "27017:27017"
    volumes:
      - ~/.docker-conf/mongodb/data/:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      retries: 5
      timeout: 5s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics ping -q" ]
      interval: 10s
      retries: 5
      timeout: 5s

networks:
  default:

volumes:
  data:
    driver: local
  postgresql_data:
    driver: local
  postgres_user_data:
    driver: local
